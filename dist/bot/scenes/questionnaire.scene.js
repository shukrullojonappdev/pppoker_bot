"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.myData = exports.questionnaireScene = void 0;
const telegraf_1 = require("telegraf");
const user_model_1 = require("../models/user.model");
let myData = null;
exports.myData = myData;
const fullnameStep = new telegraf_1.Composer();
fullnameStep.action("questionaire", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        exports.myData = myData = ctx.wizard.state;
        yield ctx.replyWithHTML("<b>–®–∞–≥ 1 - –∫–∞–∫ –º–Ω–µ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?</b> \n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è!");
        return ctx.wizard.next();
    }
    catch (e) {
        console.error(e);
    }
}));
const pppokerStep = new telegraf_1.Composer();
pppokerStep.on("text", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    myData.fullname = ctx.message.text;
    if (/^[a-z–∞-—ë ]+$/i.test(myData.fullname)) {
        yield ctx.reply("–®–∞–≥ 2 - –≤–∞—à ID –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ PPPoker! \n–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à ID –≤ PPPoker");
        return ctx.wizard.next();
    }
    else {
        ctx.reply('‚ùå–¢–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è! –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∏–º—è —Ñ–∞–º–∏–ª–∏—è" –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤, —Ü–∏—Ñ—Ä, –∏ –∏–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.');
    }
}));
const phoneNumStep = new telegraf_1.Composer();
phoneNumStep.on("text", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    myData.pppokerId = ctx.message.text;
    if (/^[0-9]+$/i.test(myData.pppokerId)) {
        yield ctx.reply("–®–∞–≥ 3 - –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —ç—Ç–æ –≤–∞–∂–Ω–æ!");
        return ctx.wizard.next();
    }
    else {
        ctx.reply("‚ùå–¢–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!");
    }
}));
const usdTexStep = new telegraf_1.Composer();
usdTexStep.on("text", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    myData.phoneNumber = ctx.message.text;
    if (/^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im.test(myData.phoneNumber)) {
        yield ctx.reply("–®–∞–≥ 4 - –≤–∞—à –∞–¥—Ä–µ—Å –≤ USDTexBot! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ –±–æ—Ç–µ USDTex bot! –¢–æ–ª—å–∫–æ —Ç–∞–∫ –±–æ—Ç —Å–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –æ—Ç –∫–æ–≥–æ –ø–æ—Å—Ç—É–ø–∞—é—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞");
        return ctx.wizard.next();
    }
    else {
        ctx.reply("‚ùå–¢–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79.......");
    }
}));
const congulationStep = new telegraf_1.Composer();
congulationStep.on("text", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    myData.usdTexId = ctx.message.text;
    myData.username = ctx.from.username;
    const user = new user_model_1.User(myData);
    yield user.save();
    console.log(myData);
    yield ctx.reply("ü•≥");
    yield ctx.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 5 —Ñ–∏—à–µ–∫ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.", telegraf_1.Markup.keyboard([
        ["üôé‚Äç‚ôÇ–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üè°–ù–∞ –≥–ª–∞–≤–Ω—É—é"],
        ["üìû–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"],
    ])
        .oneTime()
        .resize());
    return ctx.scene.leave();
}));
const questionnaireScene = new telegraf_1.Scenes.WizardScene("questionnaireWizard", fullnameStep, pppokerStep, phoneNumStep, usdTexStep, congulationStep);
exports.questionnaireScene = questionnaireScene;
