"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bot = void 0;
const telegraf_1 = require("telegraf");
const questionnaire_scene_1 = require("./scenes/questionnaire.scene");
const mongoose_1 = __importDefault(require("mongoose"));
const user_model_1 = require("./models/user.model");
class Bot {
    constructor(botToken, dataSource) {
        this.botToken = botToken;
        this.dataSource = dataSource;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            const bot = new telegraf_1.Telegraf(this.botToken);
            yield mongoose_1.default.connect(this.dataSource);
            const stage = new telegraf_1.Scenes.Stage([questionnaire_scene_1.questionnaireScene]);
            bot.use((0, telegraf_1.session)());
            bot.use(stage.middleware());
            bot.start((ctx) => __awaiter(this, void 0, void 0, function* () {
                const candidant = yield user_model_1.User.findOne({
                    username: ctx.from.username,
                }).exec();
                if (candidant) {
                    try {
                        ctx.reply("–° –≤–æ–∑—Ä–∞—â–µ–Ω–∏–µ–º!");
                    }
                    catch (e) {
                        console.error(e);
                    }
                }
                else {
                    try {
                        yield ctx.reply(`üÉè–ü—Ä–∏–≤–µ—Ç, @${ctx.from.username}! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å PPPoker_bot! –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–ø–æ–ª–Ω—è—Ç—å, —Å–Ω–∏–º–∞—Ç—å, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ñ–∏—à–∫–∏ –º–µ–∂–¥—É –∫–ª—É–±–∞–º–∏, –≤ –æ–±—â–µ–º - –∫—Ä–∞—Å–æ—Ç–∞! –ó–∞–ø–æ–ª–Ω–∏–≤ –∞–Ω–∫–µ—Ç—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å! –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ —Ç–æ–º, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–π–∫–±–µ–∫ –Ω–µ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!   –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã —Å –≤–∞–º–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–ª–µ–¥—É—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Å—Ç—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–ºüëá`, telegraf_1.Markup.inlineKeyboard([
                            telegraf_1.Markup.button.callback("–Ø –≥–æ—Ç–æ–≤!üî•", "questionaire"),
                        ]));
                    }
                    catch (e) {
                        console.error(e);
                    }
                }
            }));
            bot.action("questionaire", (ctx) => __awaiter(this, void 0, void 0, function* () {
                try {
                    yield ctx.scene.enter("questionnaireWizard");
                }
                catch (e) {
                    console.error(e);
                }
            }));
            bot.hears("üôé‚Äç‚ôÇ–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", (ctx) => __awaiter(this, void 0, void 0, function* () {
                yield ctx.reply(`üíÅ–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ç—É—Ç! \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${questionnaire_scene_1.myData.phoneNumber} \nID –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: ${questionnaire_scene_1.myData.pppokerId} \n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${questionnaire_scene_1.myData.usdTexId}`, telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback("‚öôÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "changeData")],
                    [telegraf_1.Markup.button.callback("üîô–ù–∞–∑–∞–¥", "back")],
                ]));
            }));
            bot.hears("üìû–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", (ctx) => __awaiter(this, void 0, void 0, function* () {
                yield ctx.replyWithHTML(`–ü—Ä–∏–≤–µ—Ç, @${ctx.from.username}! \n\n<b>–≠—Ç–æ —Å–≤—è–∑—å —Å –∫–æ–º–∞–Ω–¥–æ–π</b>‚öôÔ∏è —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞. \n\n<b>–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å</b> –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. \n\n–ê –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç üëâ –∂–º–∏ [–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥].`, telegraf_1.Markup.inlineKeyboard([
                    telegraf_1.Markup.button.callback("‚ùåüìû–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "stopDialog"),
                ]));
            }));
            bot.launch();
            process.once("SIGINT", () => bot.stop("SIGINT"));
            process.once("SIGTERM", () => bot.stop("SIGTERM"));
        });
    }
}
exports.Bot = Bot;
