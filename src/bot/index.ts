import { Markup, Scenes, session, Telegraf } from "telegraf";
import { questionnaireScene, myData } from "./scenes/questionnaire.scene";
import { dialogScene } from "./scenes/dialog.scene";
import mongoose from "mongoose";
import { User } from "./models/user.model";
import { request } from "express";

export let isSupport: boolean = false;

export const mainKeyboard = Markup.keyboard([
  ["üôé‚Äç‚ôÇ–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üè°–ù–∞ –≥–ª–∞–≤–Ω—É—é"],
  ["üìû–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"],
])
  .oneTime()
  .resize();

export default async function Bot(botToken: string, dataSource: string) {
  const bot = new Telegraf<any>(botToken);
  await mongoose.connect(dataSource);

  const stage = new Scenes.Stage<any>([questionnaireScene, dialogScene]);
  bot.use(session());
  bot.use(stage.middleware());

  bot.start(async (ctx) => {
    const candidant = await User.findOne({
      username: ctx.from.username,
    }).exec();
    if (candidant) {
      try {
        ctx.reply("–° –≤–æ–∑—Ä–∞—â–µ–Ω–∏–µ–º!", mainKeyboard);
      } catch (e) {
        console.error(e);
      }
    } else {
      try {
        await ctx.reply(
          `üÉè–ü—Ä–∏–≤–µ—Ç, @${ctx.from.username}! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å PPPoker_bot! –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–ø–æ–ª–Ω—è—Ç—å, —Å–Ω–∏–º–∞—Ç—å, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ñ–∏—à–∫–∏ –º–µ–∂–¥—É –∫–ª—É–±–∞–º–∏, –≤ –æ–±—â–µ–º - –∫—Ä–∞—Å–æ—Ç–∞! –ó–∞–ø–æ–ª–Ω–∏–≤ –∞–Ω–∫–µ—Ç—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å! –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ —Ç–æ–º, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–π–∫–±–µ–∫ –Ω–µ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!   –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã —Å –≤–∞–º–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–ª–µ–¥—É—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Å—Ç—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–ºüëá`,
          Markup.inlineKeyboard([
            Markup.button.callback("–Ø –≥–æ—Ç–æ–≤!üî•", "questionaire"),
          ])
        );
      } catch (e) {
        console.error(e);
      }
    }
  });

  bot.action("questionaire", async (ctx) => {
    try {
      await ctx.scene.enter("questionnaireWizard");
    } catch (e) {
      console.error(e);
    }
  });

  bot.hears("üôé‚Äç‚ôÇ–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", async (ctx) => {
    const user = await User.findOne({
      username: ctx.from.username,
    }).exec();
    await ctx.reply(
      `üíÅ–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ç—É—Ç! \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${user?.phoneNumber} \nID –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: ${user?.pppokerId} \n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${user?.usdTexId}`,
      Markup.inlineKeyboard([
        [Markup.button.callback("‚öôÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "changeData")],
        [Markup.button.callback("üîô–ù–∞–∑–∞–¥", "back")],
      ])
    );
  });

  bot.hears("üìû–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", async (ctx) => {
    ctx.scene.enter("dialogScene");
    isSupport = true;

    await ctx.replyWithHTML(
      `–ü—Ä–∏–≤–µ—Ç, @${ctx.from.username}! \n\n<b>–≠—Ç–æ —Å–≤—è–∑—å —Å –∫–æ–º–∞–Ω–¥–æ–π</b>‚öôÔ∏è —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞. \n\n<b>–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å</b> –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. \n\n–ê –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç üëâ –∂–º–∏ [–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥].`,
      Markup.inlineKeyboard([
        Markup.button.callback("‚ùåüìû–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "stopDialog"),
      ])
    );
  });

  if (isSupport) {
    setTimeout(() => {
      const res = request.get(
        "https://api.telegram.org/bot5420356035:AAG_za1nsfUZvVDt-KBPJuMzLTqdOK2lOjw/getUpdates?offset=-1"
      );
      console.log(res);
    }, 300);
  }

  bot.action("stopDialog", async (ctx) => {
    ctx.scene.leave();
    isSupport = false;
    ctx.reply("Dialog ended");
  });

  bot.action("back", async (ctx) => {
    await ctx.reply("", mainKeyboard);
  });

  bot.launch();

  process.once("SIGINT", () => bot.stop("SIGINT"));
  process.once("SIGTERM", () => bot.stop("SIGTERM"));
}
