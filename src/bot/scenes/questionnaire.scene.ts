import { Markup, Composer, Scenes } from "telegraf";
import { IUser } from "../interfaces/user.interface";
import { User } from "../models/user.model";

let myData: any = null;

const fullnameStep = new Composer<Scenes.WizardContext>();
fullnameStep.action("questionaire", async (ctx) => {
  try {
    myData = ctx.wizard.state as IUser;
    await ctx.replyWithHTML(
      "<b>–®–∞–≥ 1 - –∫–∞–∫ –º–Ω–µ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?</b> \n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è!"
    );
    return ctx.wizard.next();
  } catch (e) {
    console.error(e);
  }
});

const pppokerStep = new Composer<Scenes.WizardContext>();
pppokerStep.on("text", async (ctx) => {
  myData.fullname = ctx.message.text;
  if (/^[a-z–∞-—ë ]+$/i.test(myData.fullname)) {
    await ctx.reply(
      "–®–∞–≥ 2 - –≤–∞—à ID –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ PPPoker! \n–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à ID –≤ PPPoker"
    );
    return ctx.wizard.next();
  } else {
    ctx.reply(
      '‚ùå–¢–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è! –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∏–º—è —Ñ–∞–º–∏–ª–∏—è" –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤, —Ü–∏—Ñ—Ä, –∏ –∏–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.'
    );
  }
});

const phoneNumStep = new Composer<Scenes.WizardContext>();
phoneNumStep.on("text", async (ctx) => {
  myData.pppokerId = ctx.message.text;
  if (/^[0-9]+$/i.test(myData.pppokerId)) {
    await ctx.reply(
      "–®–∞–≥ 3 - –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —ç—Ç–æ –≤–∞–∂–Ω–æ!"
    );
    return ctx.wizard.next();
  } else {
    ctx.reply("‚ùå–¢–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!");
  }
});

const usdTexStep = new Composer<Scenes.WizardContext>();
usdTexStep.on("text", async (ctx) => {
  myData.phoneNumber = ctx.message.text;
  if (
    /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im.test(
      myData.phoneNumber
    )
  ) {
    await ctx.reply(
      "–®–∞–≥ 4 - –≤–∞—à –∞–¥—Ä–µ—Å –≤ USDTexBot! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ –±–æ—Ç–µ USDTex bot! –¢–æ–ª—å–∫–æ —Ç–∞–∫ –±–æ—Ç —Å–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –æ—Ç –∫–æ–≥–æ –ø–æ—Å—Ç—É–ø–∞—é—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞"
    );
    return ctx.wizard.next();
  } else {
    ctx.reply(
      "‚ùå–¢–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79......."
    );
  }
});

const congulationStep = new Composer<Scenes.WizardContext>();
congulationStep.on("text", async (ctx) => {
  myData.usdTexId = ctx.message.text;
  myData.username = ctx.from.username;

  const user = new User(myData);
  await user.save();

  await ctx.reply("ü•≥");
  await ctx.reply(
    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 5 —Ñ–∏—à–µ–∫ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.",
    Markup.keyboard([
      ["üôé‚Äç‚ôÇ–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üè°–ù–∞ –≥–ª–∞–≤–Ω—É—é"],
      ["üìû–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"],
    ])
      .oneTime()
      .resize()
  );
  return ctx.scene.leave();
});

const questionnaireScene = new Scenes.WizardScene(
  "questionnaireWizard",
  fullnameStep,
  pppokerStep,
  phoneNumStep,
  usdTexStep,
  congulationStep
);

export { questionnaireScene, myData };
